USE_DISTANCES = 0;SetDialogPrompt("Select a nucleotide data file:");DataSet myData = ReadDataFile (PROMPT_FOR_FILE);/* Create 4 filters: one for complete data, and one for each of the   three codon positions */DataSetFilter myFilter = CreateFilter (myData,1,"","0,1,3");DataSetFilter myFilter1 = CreateFilter (myData,1,"<100>","0,1,3");DataSetFilter myFilter2 = CreateFilter (myData,1,"<010>","0,1,3");DataSetFilter myFilter3 = CreateFilter (myData,1,"<001>","0,1,3");HarvestFrequencies (obsFreqs, myFilter, 1, 1, 1);HarvestFrequencies (obsFreqs1, myFilter1, 1, 1, 1);HarvestFrequencies (obsFreqs2, myFilter2, 1, 1, 1);HarvestFrequencies (obsFreqs3, myFilter3, 1, 1, 1);/* Define an HKY85 model using each of the 4 frequency sets *//* Let R be the ts/tv ratio, which we will eventually allow to be shared by all three of the positions */global R;HKY85RateMatrix = {{*,b,R*b,b}{b,*,b,R*b}{R*b,b,*,b}{b,R*b,b,*}};Model HKY85 = (HKY85RateMatrix, obsFreqs);Tree myTree = (a,b,d);Model HKY851 = (HKY85RateMatrix, obsFreqs1);Tree myTree1 = (a,b,d);Model HKY852 = (HKY85RateMatrix, obsFreqs2);Tree myTree2 = (a,b,d);Model HKY853 = (HKY85RateMatrix, obsFreqs3);Tree myTree3 = (a,b,d);/* Analyze combined data */fprintf(stdout,"    COMBINED ANALYSIS\n\n");LikelihoodFunction theLikFun = (myFilter,myTree);Optimize (paramValues, theLikFun);lnLik0 = paramValues[1][0];npar0 = paramValues[1][1]+3;fprintf  (stdout, theLikFun, "\n\n");/* Analyze data using 3 partitions: each partition has separate rates and base frequencies, but the ts/tv ratio (R) is shared by all three. Also, each branch has the same ts/tv ratio. */fprintf(stdout,"    SPLIT ANALYSIS\n\n");LikelihoodFunction theSplitLikFun = (myFilter1,myTree1,myFilter2, 	myTree2,myFilter3,myTree3);Optimize (paramValues, theSplitLikFun);lnLik1 = paramValues[1][0];npar1 = paramValues[1][1]+9;fprintf  (stdout, theSplitLikFun);fprintf(stdout,"\n\n");/* Compute the LRT P-value using chi^2 approximation */LRT = 2*(lnLik1-lnLik0);pValueChi2 = 1-CChi2 (LRT, npar1-npar0);fprintf(stdout,"2(lnL1-lnL0)= ",LRT,"\n");fprintf(stdout,"*** P-value (Chi-squared)= ",pValueChi2, ";  ");PRINT_DIGITS = 2;fprintf(stdout,npar1, " - ",npar0," = ",npar1-npar0,"df \n");PRINT_DIGITS = 8;/* Parametric BS to estimate the P-value. Basically just copy the above analysis inside the sim loop with adjusted variable names*/fprintf(stdout,"\n\nEnter number of parametric BS replicates: ");fscanf(stdin,"Number",reps);;count = 0;Tree simTree = (a,b,d);VERBOSITY_LEVEL = -1;/* turn off all optimization feedback, even the status line,   because for such a small data set status line redraws   take more time than the optimization itself! */for (simCounter = 1; simCounter<=reps; simCounter = simCounter+1){DataSet simData = SimulateDataSet(theLikFun);DataSetFilter simFilter = CreateFilter(simData,1,);DataSetFilter simFilter1 = CreateFilter(simData,1,"<100>");DataSetFilter simFilter2 = CreateFilter(simData,1,"<010>");DataSetFilter simFilter3 = CreateFilter(simData,1,"<001>");HarvestFrequencies (simFreqs, simFilter, 1, 1, 1);HarvestFrequencies (simFreqs1, simFilter1, 1, 1, 1);HarvestFrequencies (simFreqs2, simFilter2, 1, 1, 1);HarvestFrequencies (simFreqs3, simFilter3, 1, 1, 1);simHKY85RateMatrix = {{*,b,R*b,b}{b,*,b,R*b}{R*b,b,*,b}{b,R*b,b,*}};Model simHKY85 = (simHKY85RateMatrix, simFreqs);Tree simTree = (a,b,d);Model simHKY851 = (simHKY85RateMatrix, simFreqs1);Tree simTree1 = (a,b,d);Model simHKY852 = (simHKY85RateMatrix, simFreqs2);Tree simTree2 = (a,b,d);Model simHKY853 = (simHKY85RateMatrix, simFreqs3);Tree simTree3 = (a,b,d);LikelihoodFunction thesimLikFun = (simFilter,simTree);Optimize (paramValues, thesimLikFun);simlnLik0 = paramValues[1][0];npar0 = paramValues[1][1]+3;LikelihoodFunction thesimSplitLikFun = (simFilter1,simTree1,simFilter2, 	simTree2,simFilter3,simTree3);Optimize (paramValues, thesimSplitLikFun);simlnLik1 = paramValues[1][0];npar1 = paramValues[1][1]+9;/* Check to see if simulated LRT is larger than the one observed for the real data set */simLRT = 2*(simlnLik1-simlnLik0);if (simLRT > LRT){	count = count+1;}	}fprintf(stdout,"\n\n*** P-value (Parametric BS)= ",count/reps,"\n");